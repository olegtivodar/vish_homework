# var26
cfg = { # Точка: {Путь_к_другой_точке:длина}
    'A':{'C':7,'B':2},
    'C':{'D':4,'E':4},
    'B':{'D':1,'F':5},
    'D':{'G':8,'H':8},
    'G':{'I':7},
    'H':{'I':6},
    'E':{'G':5},
    'F':{'H':8},
    'I':{'I':'END'} # Конечная точка
}

config = cfg
routes = [] # Пустой массив, в который будет записываться сам путь и длина всего пути
# Функция нахождения длины маршрута и отображения пути от одной точки к другой
def tree(point, route):
    for target in config[point]: # Проходимся по каждой точки
        if point != target:
            r = [f'{route[0]}-{target}', route[1]+config[point][target]] # Прибавляем длину пути от одной точки к другой
            tree(target, r)
        else:
            routes.append(route) # Заполняем массив


tree('A',['A',0]) # Задаём начальную точку
minimal = sorted(routes, key=lambda x:x[1])[0] # Сортируем список по возрастанию и присваиваем к mininimal минимальный путь
print('Найден самый кратчайший путь!')
print(f'Минимальный путь: {minimal[0]}') # Выводим кратчайший путь
print(f'Его длина: {minimal[1]}') # Выводим длину кратчайшего пути
input('Для завершения работы нажмите любую клавишу...')